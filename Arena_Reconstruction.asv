%...................................................................
% Author : Nicolas Salvage
% Last update : 10/04/2025
% function : Detection Point & Reconstruction 3D 
%...................................................................

function [Average_Reference_point] = Arena_Reconstruction(stereoParams)

    % Sélection des dossiers d'images
    folder_left = '3D_arene\camera-1'; %uigetdir(pwd, 'Sélectionnez le dossier images pour la caméra gauche');
    folder_right = '3D_arene\camera-2'; %uigetdir(pwd, 'Sélectionnez le dossier images pour la caméra droite');
    
    if isequal(folder_left, 0) || isequal(folder_right, 0)
        disp('Sélection annulée.');
        return;
    end
    
    % Chargement des images
    imgExt = {'*.jpg', '*.png', '*.bmp'};
    files_left = []; files_right = [];
    for jk = 1:length(imgExt)
        files_left = [files_left; dir(fullfile(folder_left, imgExt{jk}))];
        files_right = [files_right; dir(fullfile(folder_right, imgExt{jk}))];
    end
    
    nPairs = min(length(files_left), length(files_right));
    if nPairs == 0
        error('Aucune image trouvée.');
    end
    fprintf('Nombre de paires à traiter : %d\n', nPairs);
    
    validPairFound = false;
    
    % Liste pour stocker les boîtes 3D reconstruites
    boxes3D = cell(nPairs, 1);
    all_Reference_point = zeros(nPairs,3);
    
    for i = 1:nPairs
        fprintf('Traitement de la paire %d/%d...\n', i, nPairs);
        image_L = imread(fullfile(folder_left, files_left(i).name));
        image_R = imread(fullfile(folder_right, files_right(i).name));
        
        [points_L, points_R] = detectPoints(image_L, image_R);
        if size(points_L, 1) ~= 8 || size(points_R, 1) ~= 8
            warning('Paire %d ignorée : %d points à gauche, %d points à droite.', i, size(points_L, 1), size(points_R, 1));
            continue;
        end
        
        if ~validPairFound
            disp('Première paire valide trouvée : sélection interactive.');
            ref_left = selectPointsOrder(image_L, points_L);
            ref_right = selectPointsOrder(image_R, points_R);
            ordered_points_L = ref_left;
            ordered_points_R = ref_right;
            validPairFound = true;
        else
            ordered_points_L = autoMatchPoints(ref_left, points_L);
            ordered_points_R = autoMatchPoints(ref_right, points_R);
        end
        
        
        if isempty(ordered_points_L) || isempty(ordered_points_R)
            warning('Paire %d ignorée : correspondance automatique impossible.', i);
            continue;
        end
        
        pts_cam1 = ordered_points_L(:, [2, 1]);
        pts_cam2 = ordered_points_R(:, [2, 1]);
        
        try
            pts_cam1 = undistortPoints(pts_cam1, stereoParams.CameraParameters1);
            pts_cam2 = undistortPoints(pts_cam2, stereoParams.CameraParameters2);
            [points3D, ~] = triangulate(pts_cam1, pts_cam2, stereoParams);
            [points3D,Reference_point,R] = process3DPoints(points3D);
    
            % Enregistrer la boîte 3D pour la paire actuelle
            boxes3D{i} = points3D;
            all_Reference_point(i,:) = Reference_point;
    
            ind = all_Reference_point(:,1) == 0;
            all_Reference_point(ind,:) = [];
            Average_Reference_point = mean(all_Reference_point);
            
            fprintf('Paire %d traitée avec succès.\n', i);
        catch ME
            warning('Erreur lors du traitement de la paire %d : %s', i, ME.message);
        end
    end
    
    % Comparer les boîtes avec les boîtes précédentes
    points = compareBoxes3D(boxes3D, i);
    
    % --- Fonctions Utilitaires ---
    
    % Fonction pour comparer les boîtes 3D
    function point = compareBoxes3D(boxes3D, currentIndex)
        
        %supprimer les cellule vide 
        idx = cellfun('isempty',boxes3D);
        boxes3D(idx) = [];
    
        n = 1; % Initialiser n
    
        for j = 1:size(boxes3D, 1) % Boucle à travers les différentes boîtes dans boxes3D (en supposant que chaque ligne représente une boîte)
            for k = 1:8 % Boucle à travers les 8 points de chaque boîte
                point{k}(n, :) = boxes3D{j}(k, :); % Stocker le k-ième point de la j-ième boîte
            end
            n = n + 1; % Incrémenter n pour la boîte suivante
        end
        
        ecart_mean_max = 5; % Seuil d'écart-type pour considérer un outlier
    
        % Initialisation des matrices pour stocker les moyennes et écarts-types
        mean_points = zeros(8, 3); % Moyennes pour chaque point (8 points et 3 dimensions)
        std_points = zeros(8, 3);  % Ecarts-types pour chaque point (8 points et 3 dimensions)
    
       points_theo = [0 -510 -410; -510 -510 -410; -510 -510 0; 0 -510 0; 0 0 -410; 565 0 470; 565 0 0; 0 0 0];
    
        for l = 1:8
        
            mean_av(l, :) = mean(point{l}); % Moyenne pour chaque colonne (x, y, z)
            std_av(l, :) = std(point{l}); % Ecart-type pour chaque colonne (x, y, z)
        
            % Calcul de la différence
            Diff{l} = point{l} - points_theo(l, :);
            
            % Création d'un masque logique pour chaque colonne
            Seuil{l} = all(abs(Diff{l}) < 15, 2);  % Vérifie que toutes les colonnes respectent le seuil
            
            % Application du masque sur les lignes complètes
            point{l} = point{l}(Seuil{l}, :);
        
            mean_ap(l, :) = mean(point{l}); % Moyenne pour chaque colonne (x, y, z)
            std_ap(l, :) = std(point{l}); % Ecart-type pour chaque colonne (x, y, z)
        end
        
        points3D = mean_ap;
        % Calcul des différences moyennes
        d_x = [(points3D(2,1)-points3D(1,1)) (points3D(3,1)-points3D(4,1)) (points3D(6,1)-points3D(5,1)) (points3D(7,1)-points3D(8,1))];
        d_y = [(points3D(5,2)-points3D(1,2)) (points3D(6,2)-points3D(2,2)) (points3D(7,2)-points3D(3,2)) (points3D(8,2)-points3D(4,2))];
        d_z = [(points3D(4,3)-points3D(1,3)) (points3D(3,3)-points3D(2,3)) (points3D(8,3)-points3D(5,3)) (points3D(7,3)-points3D(6,3))];
        
        largeur_mean_x = abs(mean(d_x));
        longueur_mean_y = abs(mean(d_z));
        Hauteur_mean_z = abs(mean(d_y));
        
        Diff_x = largeur_mean_x - 565;
        Diff_y = longueur_mean_y - 470;
        Diff_z = Hauteur_mean_z - 510;
        
        fprintf('Différence moyenne x (en mm) %4f .\n', Diff_x);
        fprintf('Différence moyenne y (en mm) %4f .\n', Diff_y);
        fprintf('Différence moyenne z (en mm) %4f .\n', Diff_z);
        
        
        % Pour visualiser les points sans outliers
        figure;
        hold on;
        for ik = 1:8
             plot3(point{ik}(:, 1), point{ik}(:, 2), point{ik}(:, 3), 'o');
             %plot3(mean_points(k,1),mean_points(k,3),mean_points(k,2),'o')
        end
        hold off;
        %Carré
        reconstruction3D(points3D);
       
    end
    
   
    
    function [points_L, points_R] = detectPoints(image_L, image_R)
        points_L = extractPoints(image_L);
        points_R = extractPoints(image_R);
    end
    
    function points = extractPoints(image)
        
        hsv = rgb2hsv(image);
    
        % Création du masque avec les mêmes seuils HSV  (1=Hue, 2=Saturation, 3=Value)
        % Detection du vert
        mask = (hsv(:,:,1) >= 0.17 & hsv(:,:,1) <= 0.35) & (hsv(:,:,2) >= 0.3 & hsv(:,:,2) <= 1) & (hsv(:,:,3) >= 0.1 & hsv(:,:,3) <= 1);       
        mask = bwareaopen(mask, 50); % réglage du seuil de détection
        B = bwboundaries(mask, 'noholes'); % Extraire les frontières des régions
        
        if isempty(B)
            points = [];
            return;
        end
    
        % Calculer le centre moyen de chaque région détectée
        temp = cellfun(@(x) mean(x,1), B, 'UniformOutput', false);
        points = vertcat(temp{:});
    end
    
    
    function ordered_points = selectPointsOrder(image, points)
        figure;
        imshow(image);
        hold on;
        plot(points(:,2), points(:,1), 'ro', 'MarkerSize', 8, 'LineWidth', 2);
        title('Cliquez sur les points dans l''ordre voulu');
        availableIndices = 1:size(points, 1);
        newOrder = zeros(size(points, 1), 1);
    
        for j = 1:size(points, 1)
            [xClick, yClick] = ginput(1);
            distances = sqrt((points(availableIndices,2) - xClick).^2 + (points(availableIndices,1) - yClick).^2);
            [~, localIdx] = min(distances);
            selectedIndex = availableIndices(localIdx);
            newOrder(j) = selectedIndex;
    
            plot(points(selectedIndex,2), points(selectedIndex,1), 'gx', 'MarkerSize', 12, 'LineWidth', 2);
            text(points(selectedIndex,2), points(selectedIndex,1), sprintf(' P%d', j), 'Color', 'green', 'FontSize', 12, 'FontWeight', 'bold');
    
            availableIndices(localIdx) = [];
        end
        hold off;
        ordered_points = points(newOrder, :);
    end
    
    function ordered_points = autoMatchPoints(ref_points, candidate_points)
        ordered_points = zeros(size(ref_points));
        for ij = 1:size(ref_points, 1)
            distances = sqrt(sum((candidate_points - ref_points(ij,:)).^2, 2));
            [~, idx] = min(distances);
            ordered_points(ij,:) = candidate_points(idx,:);
        end
    end
    
    function [points3D_aligned,Reference_point,R]  = process3DPoints(points3D)
    
        Reference_point = points3D(8,:);
        
        % remise droite de la boite 
        vX = points3D(7,:) - points3D(8,:);
        vY = points3D(4,:) - points3D(8,:);
        vZ = points3D(5,:) - points3D(8,:);

        A = [vX; vY; vZ]';
        [Q, ~] = qr(A);
        
        % Matrice de rotation
        R = Q;
        
        % Centrer les points en plaçant P8 à l'origine
        points_centered = points3D - Reference_point;
        
        % Appliquer la rotation
        points3D_aligned = (R' * points_centered')';
        
        % Visualisation avec inversion de Y et Z
        figure;
        plot3(points3D_aligned(:,1), points3D_aligned(:,3), points3D_aligned(:,2), 'bo'); % Y <--> Z inversés ici
        hold on;
        grid on;
        xlabel('X');
        ylabel('Z');  % <-- devient Z visuellement
        zlabel('Y');  % <-- devient Y visuellement
        title('Boîte réorientée avec P8 à l’origine (Y et Z inversés)');
        
        for i = 1:size(points3D_aligned,1)
            text(points3D_aligned(i,1), points3D_aligned(i,3), points3D_aligned(i,2), ...
                sprintf('P%d', i), 'FontSize', 12, 'Color', 'r');
        end
        
        % Vérification de l'alignement
        tol = 1e-3;  % Tolérance pour l'alignement (en mm, à ajuster si nécessaire)
        
        fprintf('\n=== Vérification de lalignement ===\n');
        
        % P8 doit être à l'origine
        disp('P8 (doit être proche de [0 0 0]):');
        disp(points3D_aligned(8,:));
        
        % Vérif alignement de P7 sur X (Y et Z ≈ 0)
        errP7 = abs(points3D_aligned(7,2:3)); % Y et Z
        fprintf('P7 (aligné X): Y=%.4f, Z=%.4f\n', errP7(1), errP7(2));
        if all(errP7 < tol)
            disp('✅ P7 bien aligné sur laxe X');
        else
            disp('❌ P7 pas parfaitement aligné');
        end
        
        % Vérif alignement de P4 sur Y (X et Z ≈ 0)
        errP4 = abs([points3D_aligned(4,1), points3D_aligned(4,3)]);
        fprintf('P4 (aligné Y): X=%.4f, Z=%.4f\n', errP4(1), errP4(2));
        if all(errP4 < tol)
            disp('✅ P4 bien aligné sur laxe Y');
        else
            disp('❌ P4 pas parfaitement aligné');
        end
        
        % Vérif alignement de P5 sur Z (X et Y ≈ 0)
        errP5 = abs(points3D_aligned(5,1:2));
        fprintf('P5 (aligné Z): X=%.4f, Y=%.4f\n', errP5(1), errP5(2));
        if all(errP5 < tol)
            disp('✅ P5 bien aligné sur laxe Z');
        else
            disp('❌ P5 pas parfaitement aligné');
        end
         
    end
end


